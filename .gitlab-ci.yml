include:
  - template: Security/SAST.gitlab-ci.yml

build-library:
  stage: build
  image: quay.io/rockylinux/rockylinux:8
  needs: []
  before_script:
    - echo -e "section_start:$(date +%s):dnf[collapsed=true]\r\e[0KInstalling dependencies"
    - dnf -y install dnf-plugins-core epel-release
    - dnf config-manager --set-enabled powertools
    - dnf -y install meson ninja-build gcc-gfortran netcdf-fortran-devel
    - echo -e "section_end:$(date +%s):dnf\r\e[0K"
  script:
    - meson setup build lib
    - meson compile -C build/

build-linux:
  stage: build
  image: python:3.10
  needs: []
  cache:
    key: "$CI_JOB_NAME"
    paths:
      - .cache/pip
  variables:
    PIP_CACHE_DIR: "${CI_PROJECT_DIR}/.cache/pip"
  before_script:
    - apt-get update
    - apt-get install -y gfortran
    - python --version
    - pip install --upgrade pip
    - pip install --progress-bar=off build
  script:
    - python -m build
  artifacts:
    paths:
      - dist/*

build-manylinux2014:
  stage: build
  image: quay.io/pypa/manylinux2014_x86_64
  needs: [build-linux]
  parallel:
    matrix:
      - PYABI: [cp37-cp37m, cp38-cp38, cp39-cp39, cp310-cp310]
  script:
    - /opt/python/$PYABI/bin/python -m build
    - auditwheel repair -w dist/ ./dist/access_atmosphere-*-$PYABI-linux_x86_64.whl
  artifacts:
    paths:
      - dist/*-$PYABI-manylinux*.whl

import-linux:
  stage: test
  image: python:3.10-slim
  needs: [build-linux]
  cache:
    key: "$CI_JOB_NAME"
    paths:
      - .cache/pip
  variables:
    PIP_CACHE_DIR: "${CI_PROJECT_DIR}/.cache/pip"
  before_script:
    - python --version
    - pip install --upgrade pip
  script:
    - pip install --progress-bar=off ./dist/access_atmosphere-*-linux_x86_64.whl
    - python -c 'import access_atmosphere'

lint:
  stage: test
  image: python:3.10-slim
  needs: []
  before_script:
    - python --version
    - pip install --upgrade pip
    - pip install tox
  script:
    - tox -l
    - tox -e black,flake8,mypy
  artifacts:
    paths:
      - mypy.junit.xml
      - cobertura.xml
      - lineprecision.txt
    reports:
      junit: mypy.junit.xml
      cobertura: cobertura.xml
    when: always

publish-pypi:
  stage: deploy
  image: python:3.10-slim
  needs: ["build-linux", "build-manylinux2014"]
  # Once a package version is uploaded to a PyPI registry, it cannot be updated.
  # So to ensure no conflicts, only tagged releases are published.
  only:
    - tags
  before_script:
    - python --version
    - pip install --upgrade pip
    - pip install twine
  script:
    - >
      TWINE_PASSWORD=${CI_JOB_TOKEN}
      TWINE_USERNAME=gitlab-ci-token
      python -m twine upload
      --repository-url ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi
      dist/*.tar.gz dist/*manylinux*.whl
