include:
  - template: Security/SAST.gitlab-ci.yml
  - template: Security/Secret-Detection.gitlab-ci.yml
  - template: Workflows/Branch-Pipelines.gitlab-ci.yml

variables:
  CARGO_INCREMENTAL: "0"
  CARGO_TERM_COLOR: "always"

lint:
  stage: test
  needs: []
  image: "python:3.9-slim"
  before_script:
    - python --version
    - pip install --upgrade pip
    - pip install nox
  script:
    - nox -s black ruff_full
  artifacts:
    paths:
      - ruff.junit.xml
    reports:
      junit: ruff.junit.xml
    when: always

mypy:
  stage: test
  needs: []
  allow_failure: true
  image: "python:3.9-slim"
  before_script:
    - python --version
    - pip install --upgrade pip
    - pip install nox
  script:
    - nox -s mypy_full
  artifacts:
    paths:
      - mypy.junit.xml
      - cobertura.xml
      - lineprecision.txt
    reports:
      junit: mypy.junit.xml
      coverage_report:
        coverage_format: cobertura
        path: cobertura.xml
    when: always

stubtest:
  stage: test
  needs: [build-manylinux]
  image: "python:3.9-slim"
  before_script:
    - python --version
    - pip install --upgrade pip
    - pip install nox
  script:
    - nox -s stubtest -- access_atmosphere-*-cp39-cp39-*.whl

rustfmt:
  stage: test
  needs: []
  image: rust:1.70-bookworm
  before_script:
    - rustup component add rustfmt
  script:
    - cargo fmt --check -v

rust-tests:
  stage: test
  needs: []
  image: rust:1.70-bookworm
  script:
    - cargo test --locked

build-manylinux:
  stage: build
  image: quay.io/pypa/manylinux_2_28_x86_64:latest
  before_script:
    - curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- --default-toolchain 1.70 --profile minimal -y
    - source $HOME/.cargo/env
    - python3.11 -m venv --upgrade-deps venv
    - source venv/bin/activate
    - pip install maturin
    - rustup --version
    - maturin --version
  script:
    - cargo fetch --locked
    - maturin sdist
    - maturin build --release --features abi3
    - maturin build --release -i "python3.9" -i "python3.10" -i "python3.11" -i "python3.12"
    - cp -t . target/wheels/*.tar.gz target/wheels/*.whl
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_SHORT_SHA"
    paths:
      - "*.tar.gz"
      - "*.whl"

build-musllinux:
  stage: build
  image: quay.io/pypa/musllinux_1_2_x86_64:latest
  before_script:
    - curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- --default-toolchain 1.70 --profile minimal -y
    - source $HOME/.cargo/env
    - python3.11 -m venv --upgrade-deps venv
    - source venv/bin/activate
    - pip install maturin
    - rustup --version
    - maturin --version
  script:
    - cargo fetch --locked
    - maturin build --release --features abi3
    - maturin build --release -i "python3.9" -i "python3.10" -i "python3.11" -i "python3.12"
    - cp target/wheels/*.whl .
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_SHORT_SHA"
    paths:
      - "*.whl"

build-windows:
  stage: build
  image: rust:1.70-bookworm
  before_script:
    - echo -e "section_start:$(date +%s):apt-get\r\e[0KInstalling dependencies"
    - export LANG="C.UTF-8"
    - apt-get --quiet update
    - apt-get --quiet --yes --no-install-recommends install python3-venv gcc-mingw-w64-x86-64
    - python3 -m venv --upgrade-deps venv
    - source ./venv/bin/activate
    - pip install maturin
    - rustup target add x86_64-pc-windows-gnu
    - echo -e "section_end:$(date +%s):apt-get\r\e[0K"
    - rustc --version && python3 --version
  script:
    - maturin build --release --target x86_64-pc-windows-gnu --features abi3
    - cp -t . target/wheels/*.whl
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_SHORT_SHA"
    paths:
      - "*.whl"

import-linux:
  stage: test
  image: python:3.11-slim
  needs: [build-manylinux]
  before_script:
    - python --version
    - pip install --upgrade pip
  script:
    - pip install --progress-bar=off ./access_atmosphere-*-cp311-cp311-manylinux*.whl
    - python -c 'import access_atmosphere'

publish-package:
  stage: deploy
  image: python:3.11-slim
  needs: ["build-windows", "build-manylinux", "build-musllinux"]
  # Once a package version is uploaded to a PyPI registry, it cannot be updated.
  # So to ensure no conflicts, only tagged releases are published.
  only:
    - tags
  before_script:
    - python --version
    - pip install --upgrade pip
    - pip install twine
  script:
    - >
      TWINE_USERNAME=gitlab-ci-token
      TWINE_PASSWORD=${CI_JOB_TOKEN}
      python -m twine upload
      --repository-url ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi
      *.tar.gz *manylinux*.whl *musllinux*.whl *win*.whl

api-documentation:
  stage: test
  needs: [build-manylinux]
  image: "python:3.9-slim"
  before_script:
    - python --version
    - pip install --upgrade pip
    - pip install nox
  script:
    - nox -s pdoc -- access_atmosphere-*-cp39-cp39-manylinux*.whl
  artifacts:
    paths:
      - public

pages:
  stage: deploy
  needs: [api-documentation]
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
  image: "python:3.9-slim"
  script:
    - echo "deploying documentation"
  artifacts:
    paths:
      - public

# This is a temporary job to create musllinux wheels for the netCDF4/cftime
# packages since they're not published on PyPI yet
dependency-musllinux-wheels:
  stage: deploy
  needs: []
  when: manual
  parallel:
    matrix:
      - PYTHON: [python3.9, python3.10, python3.11, python3.12]
  image: quay.io/pypa/musllinux_1_2_x86_64:latest
  before_script:
    - apk add hdf5-dev netcdf-dev
  script:
    - ${PYTHON} -m pip wheel netCDF4
    - auditwheel repair netCDF4-*-linux_x86_64.whl cftime-*-linux_x86_64.whl
    - cp wheelhouse/*.whl .
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_SHORT_SHA"
    paths:
      - "netCDF4-*-musllinux_1_2_x86_64.whl"
      - "cftime-*-musllinux_1_2_x86_64.whl"